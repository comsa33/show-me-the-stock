services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: stock-dashboard-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - stock-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock-dashboard-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - ALLOWED_ORIGINS=["http://localhost:3000","http://127.0.0.1:3000"]
    depends_on:
      - redis
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - stock-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: stock-dashboard-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - stock-network
    stdin_open: true
    tty: true

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: stock-dashboard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - frontend_build:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    networks:
      - stock-network
    profiles:
      - production

volumes:
  redis_data:
  frontend_build:

networks:
  stock-network:
    driver: bridge